using Dastyar.Application;
using Dastyar.Domain;
using Dastyar.SharedKernel.Domain;
using MediatR;
using Microsoft.AspNetCore.Mvc;

namespace Dastyar.Api;

[Tags(ModuleNames.DefinitionManagement)]
[ApiController]
//[Authorize]
//[ApiVersion(ApiVersions.V1)]
[Route("api/[controller]")]
public class {{ Plural }}Controller(ISender sender) : ControllerBase
{
    /// <summary>
    /// Retrieves a {{ CamelCase }} by its Id
    /// </summary>
    /// <param name="id"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpGet("{id}")]
    //[Authorize(Policy = LinkPermissions.View)]
    public async Task<ActionResult<{{ PascalCase }}Response>> GetById([FromRoute] short id, CancellationToken cancellationToken = default)
    {
        var query = new Get{{ PascalCase }}ByIdQuery(id);
        Result<{{ PascalCase }}Response> result = await sender.Send(query, cancellationToken);

        return result.ToActionResult();
    }

    /// <summary>
    /// Retrieves the list of defined {{ CamelPlural }}
    /// </summary>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpGet]
    //[Authorize(Policy = LinkPermissions.View)]
    public async Task<ActionResult<IReadOnlyList<{{ PascalCase }}Response>>> GetList(CancellationToken cancellationToken = default)
    {
        var query = new Get{{ PascalCase }}ListQuery();
        Result<IReadOnlyList<{{ PascalCase }}Response>> result = await sender.Send(query, cancellationToken);

        return result.ToActionResult();
    }

    /// <summary>
    /// Creates a new {{ CamelCase }}
    /// </summary>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpPost]
    //[Authorize(Policy = LinkPermissions.Create)]
    public async Task<IActionResult> Create([FromBody] Create{{ PascalCase }}Request request, CancellationToken cancellationToken = default)
    {
        var command = BuildCommand(request);

        Result<short> result = await sender.Send(command, cancellationToken);

        return result.ToCreatedAtActionResult(nameof(GetById), new { id = result.Value! });

        static Create{{ PascalCase }}Command BuildCommand(Create{{ PascalCase }}Request request)
        {
            return new(
            {{~ for prop in Properties ~}}
            {{~ if prop.OriginalName != "ID" ~}}
                {{ prop.PascalCase }}: request.{{ prop.PascalCase }}{{ if !for.last }}, {{ end }}
            {{~ end ~}}{{~ end ~}}
            );
        }
    }

    /// <summary>
    /// Updates a specific {{ CamelCase }}
    /// </summary>
    /// <param name="id"></param>
    /// <param name="request"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    [HttpPut("{id}")]
    //[Authorize(Policy = LinkPermissions.Update)]
    public async Task<IActionResult> Update(
        [FromRoute] short id,
        [FromBody] Update{{ PascalCase }}Request request,
        CancellationToken cancellationToken = default)
    {
        var command = BuildCommand(id, request);

        Result<short> result = await sender.Send(command, cancellationToken);

        return result.ToNoContentResult();

        static Update{{ PascalCase }}Command BuildCommand(short id, Update{{ PascalCase }}Request request)
        {
            return new(
            {{~ for prop in Properties ~}}
            {{~ if prop.OriginalName == "ID" ~}}
                Id: id,
            {{~ else ~}}{{~ if prop.OriginalName != "ID" ~}}
                {{ prop.PascalCase }}: request.{{ prop.PascalCase }}{{ if !for.last }}, {{ end }}
            {{~ end ~}}{{~ end ~}}{{~ end ~}}
            );
        }
    }

    [HttpDelete("{id}")]
    //[Authorize(Policy = LinkPermissions.Delete)]
    public async Task<IActionResult> Delete([FromRoute] short id, CancellationToken cancellationToken = default)
    {
        var command = new Delete{{ PascalCase }}Command(id);
        Result<short> result = await sender.Send(command, cancellationToken);

        return result.ToNoContentResult();
    }
}
