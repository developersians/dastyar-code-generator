using Dastyar.Domain;
using Dastyar.SharedKernel.Application;
using Dastyar.SharedKernel.Domain;
using MediatR;

namespace Dastyar.Application;

internal sealed class Create{{ PascalCase }}CommandHandler(
    I{{ PascalCase }}Repository  {{ CamelCase }}Repository,
    IUnitOfWork unitOfWork) : IRequestHandler<Create{{ PascalCase }}Command, Result<short>>
{
    public async Task<Result<short>> Handle(Create{{ PascalCase }}Command command, CancellationToken cancellationToken)
    {
        //Rule1
        bool exists = await  {{ CamelCase }}Repository
            .ExistsAsync(x => x.WhichField.Trim().ToLower() == command.WhichField.Trim().ToLower(), cancellationToken);
        if (exists)
            return Result<short>.Failure({{ PascalCase }}Errors.AlreadyExists(command.FA_NAME));

        {{ OriginalName }} entity =  {{ OriginalName }}.Create(            
        {{~ for prop in Properties ~}}
        {{~ if prop.OriginalName == "ID" ~}}
            id: 0, //TODO: Decide how to generate IDs. (AutoGenerated|GetNextId){{ else }}
            {{ prop.CamelCase }}: command.{{ prop.PascalCase }}{{ if !for.last }}, {{ end }}{{~ end ~}}
        {{~ end ~}});

        await  {{ CamelCase }}Repository.AddAsync(entity, cancellationToken);
        await unitOfWork.SaveChangesAsync(cancellationToken);

        return Result<short>.Success(entity.ID);
    }
}
